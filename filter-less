#include <math.h>
#include "helpers.h"
// тут реализация прототипов из helpers.h, это нам и нужно прописывать)
// Convert image to grayscale

int cap255(int color);

void grayscale(int height, int width, RGBTRIPLE image[height][width]) //должна взять изображение и превратить его в черно-белую версию того же изображения.
{
    int originalRed, originalGreen, originalBlue;
    float averageColors;
    for (int i = 0; i < height; i++)//берём всю высоту картинки
    {
        for (int j = 0; j < width; j++) // и всю ширину картинки
        {
            originalRed = image[i][j].rgbtRed;// узнаём значение красного (0 - 255)
            originalGreen = image[i][j].rgbtGreen;// узнаём значение зелёного (0 - 255)
            originalBlue = image[i][j].rgbtBlue;// узнаём значение синего (0 - 255)
            //при получении среднего значения получим не целое число! округляем!
            averageColors = round((originalRed +
                                   originalGreen +
                                   originalBlue) /
                                  3.0);// получаем среднее значение цветов пикселя
            // устанавливаем каждому цвету среднее значение, делая его оттвенком серого
            image[i][j].rgbtRed = averageColors;
            image[i][j].rgbtGreen = averageColors;
            image[i][j].rgbtBlue = averageColors;
        }
    }
}

// Convert image to sepia
void sepia(int height, int width, RGBTRIPLE image[height][width])//должна взять изображение и превратить его в версию того же изображения в сепии.
{ // должны добавить красноватый оттвенок, алгоритм уже существует, (.393 * originalRed +)
    int originalRed, originalGreen, originalBlue;
    int sephiaRed, sephiaGreen, sephiaBlue;// для каждого цвета создаём переменную под цвет сепии
    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            originalRed = image[i][j].rgbtRed;
            originalGreen = image[i][j].rgbtGreen;
            originalBlue = image[i][j].rgbtBlue;
// вычисляем по формуле
            sephiaRed = round(.393 * originalRed +
                              .769 * originalGreen +
                              .189 * originalBlue);

            sephiaGreen = round(.349 * originalRed +
                                .686 * originalGreen +
                                .168 * originalBlue);

            sephiaBlue = round(.272 * originalRed +
                               .534 * originalGreen +
                               .131 * originalBlue);
// присваиваем новые значения цветов используя функцию cap255(чтобы число не превышало 255!)
            sephiaRed = cap255(sephiaRed);
            sephiaGreen = cap255(sephiaGreen);
            sephiaBlue = cap255(sephiaBlue);

            image[i][j].rgbtRed = sephiaRed;
            image[i][j].rgbtGreen = sephiaGreen;
            image[i][j].rgbtBlue = sephiaBlue;
        }
    }
}

// Reflect image horizontally
void reflect(int height, int width, RGBTRIPLE image[height][width])//должна принимать изображение и отражать его по горизонтали.
{
    RGBTRIPLE temp_row[width];// временное хранилище строки (которой будем менять направление )
    for (int i = 0; i < height; i++) // высота как обычно
    {
        for (int j = 0; j < width; j++) // выбранную строку сохраняем в временную строку
        {
            temp_row[j] = image[i][j];
        }
        for (int j = 0; j < width; j++)// тут меняем местами цвета каждого пикселя поочереди
        {
            image[i][j].rgbtRed = temp_row[width - 1 - j].rgbtRed; // если ширина 10, то 1й станет как 10й, 2й как 9й (10 - 1 - 0),показать пример
            image[i][j].rgbtGreen = temp_row[width - 1 - j].rgbtGreen;
            image[i][j].rgbtBlue = temp_row[width - 1 - j].rgbtBlue;
        }
    }
}

// Blur image
void blur(int height, int width, RGBTRIPLE image[height][width])//функция должна взять изображение и превратить его в размытую версию того же изображения.
{// квадрат - среднее значение всех соседних пикселей
    RGBTRIPLE temp_image[height][width]; // создаём временное хранилище всей фотографии
    for (int h = 0; h < height; h++)
    {
        for (int w = 0; w < width; w++)
        {
            temp_image[h][w] = image[h][w];
        }
    }

    for (int i = 0; i < height; i++) // высота
    {
        for (int j = 0; j < width; j++) // ширина
        {
            int count = 0; // количество соседствующих пикселей, для нахождения среднего значения
            float sumRed = 0; //сумма всех красных цветов в квадрате 3*3
            float sumGreen = 0;
            float sumBlue = 0;

            for (int k = -1; k < 2; k++) // начинаем со строки выше на 1, заканчивая ниже на 1
            {
                for (int l = -1; l < 2; l++) // начинаем с элемента слева, заканчивая правым
                {
                    // Check if pixel is outside rows
                    if (i + k < 0 || i + k >= height)
                    {
                        continue;// если находимся за границей изображения по высоте, пропускаем данный блок кода
                    }
                    // Check if pixel is outside columns
                    if (j + l < 0 || j + l >= width)
                    {
                        continue;// если находимся за границей изображения по ширине, пропускаем данный блок кода
                    }
                    // Otherwise add to sums
                    sumRed += temp_image[i + k][j + l].rgbtRed; // суммируем все рядом стоящие пиксели
                    sumGreen += temp_image[i + k][j + l].rgbtGreen;
                    sumBlue += temp_image[i + k][j + l].rgbtBlue;
                    count++;//добавляем соседа
                }
            }

            image[i][j].rgbtRed = (int)round(sumRed / count); // получаем среднее значание цвета квадрата пикселей
            image[i][j].rgbtGreen = (int)round(sumGreen / count);
            image[i][j].rgbtBlue = (int)round(sumBlue / count);
        }
    }
}

int cap255(int color)
{
    if (color > 255)
    {
        return 255;
    }
    else
    {
        return color;
    }
}
//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
